# -*- coding: utf-8 -*-
"""Projet Versionning de code et Python

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZAAOFxeeB_usOS-YzpPWv3Kxj0cG_OKk
"""

import numpy as np
import numpy.polynomial.polynomial as nppol
import matplotlib.pyplot as plt

x = int(input())

def A(x):
    return (x**3)-(1.5*x**2)-(6*x)+5
    print(A(x))

print(A(x))

def factorielle(x):
   if x == 0:
      return 1
   else:
      F = 1
      for k in range(2,x+1):
         F = F * k

      return F;

print(factorielle(x))

######################### c) Implémenter la suite de Fibonnaci #########################

def fibonacci(n):
    if(n <= 1):
        return n
    else:
        return (fibonacci(n-1) + fibonacci(n-2))
n = int(input("Entrez le nombre :"))
print("La suite Fibonacci est :")
for i in range(n):
    print(fibonacci(i))

x= input()

numero_max = 999999
numero_min = 0.00001
def factorielle(x):

##### si x un str #####
 if (type(x)==str):

  print("il est impossible d'effectuer le calcul avec un str ")
  x= input("VEUILLER SAISSIR UNE NOUVELLE VALEUR DE TYPE NUMERIQUE")

    ##### cas des nombre complexes#####  
if (type(x) == complex):
                        x = x.real #prendre que le coté réelle 
print("il est impossible d'effectuer le calcul avec un nombre complexe")
x= input("VEUILLEZ SAISSIR A NOUVEAU VOS VALEUR")  


   ##### cas ou la valeur de x est null ou negatif#####  
if x<=0 :

 print("le calcule ne peut pas etre effectuer avec un nombre nul ou infferieur a zero")  
x= input("VEUILLEZ SAISSIR A NOUVEAU VOS VALEUR")

  ##### cas ou les nombres sont trés grands#####
if(x> numero_max):

 print("vous depassez la borne max de calcul")
x= input("saissir de nouvelle valeur")

   ##### cas ou les nombres sont trop petit #####
if (x< numero_min):

 print("vous etes inferieur au borne min de calcul")
 x= input("saissir de nouvelle valeur") 
   

else:
    print(factorielle(x))

from math import log, sqrt, pi, exp

from scipy.stats import norm
from datetime import datetime, date

import numpy as np
import pandas as pd
from pandas import DataFrame

def bs_call(S,K,T,r,sigma):
    return S*norm.cdf(d1(S,K,T,r,sigma))-K*exp(-r*T)*norm.cdf(d2(S,K,T,r,sigma))
  
def bs_put(S,K,T,r,sigma):
    return K*exp(-r*T)-S+bs_call(S,K,T,r,sigma)

def d1(S,K,T,r,sigma):
    return(log(S/K)+(r+sigma**2/2.)*T)/(sigma*sqrt(T))
def d2(S,K,T,r,sigma):
    return d1(S,K,T,r,sigma)-sigma*sqrt(T)